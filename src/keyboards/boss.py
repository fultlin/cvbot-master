from aiogram.utils.i18n import gettext as _
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
import math


# def get_menu_kb() -> ReplyKeyboardMarkup:
#     builder = ReplyKeyboardBuilder()
#     builder.button(text='/start'))
#     # return builder.as_markup(resize_keyboard=True)



def ease_link_kb():
    inline_kb_list = [
        [InlineKeyboardButton(text='üîäüü© –†–∞—Å—Å—ã–ª–∫–∞', callback_data='mailing', resize_keyboard=True)],
        [InlineKeyboardButton(text='üëÄüü© –†–∏—á–∞—É—Ç—ã', callback_data='reach_out', resize_keyboard=True)],
        [InlineKeyboardButton(text='üëÄüü© –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data='edit_text', resize_keyboard=True)],
        [InlineKeyboardButton(text='üëÄüü© –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è', callback_data='edit_photo', resize_keyboard=True)],
        [InlineKeyboardButton(text='üìäüü™ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã', callback_data='list_promos', resize_keyboard=True)],
        [InlineKeyboardButton(text='üìäüü™ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='add_promo', resize_keyboard=True)],
        [InlineKeyboardButton(text='üß©üü® –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å—á–∏–∫–µ', callback_data='manageuser', resize_keyboard=True)],
     #   [InlineKeyboardButton(text='üîá‚¨õÔ∏è –ó–∞–±–∞–Ω–∏—Ç—å/—Ä–∞–∑–±–∞–Ω–∏—Ç—å —á–µ–ª–∏–∫–∞', callback_data='ban', resize_keyboard=True)],
        [InlineKeyboardButton(text='üîá‚¨õÔ∏è –ó–∞–¥–∞—Ç—å —Ü–µ–Ω—É', callback_data='set_price', resize_keyboard=True)],
        [InlineKeyboardButton(text='üîá‚¨õÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='del_promo', resize_keyboard=True)],
    #    [InlineKeyboardButton(text='üî≥üî≤ –ù–∞–∑–Ω–∞—á–∏—Ç—å/—Å–Ω—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data='sds', resize_keyboard=True)]
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_kb_list, row_width=2)


def get_reach_out(j: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()

    kb.row(InlineKeyboardButton(text='–ü–æ–∫–∏–Ω—É–ª–∏ –∫–ª—É–± –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ', callback_data=f'rec_0_0_{j}'))
    kb.row(InlineKeyboardButton(text='–ü–æ–∫–∏–Ω—É–ª–∏ –∫–ª—É–± –ø–æ—Å–ª–µ 1 –º–µ—Å—è—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏', callback_data=f'rec_1_0_{j}'))
    kb.row(InlineKeyboardButton(text='–ü–æ–∫–∏–Ω—É–ª–∏ –∫–ª—É–± –ø–æ—Å–ª–µ 2-3 –º–µ—Å—è—Ü–µ–≤ –ø–æ–¥–ø–∏—Å–∫–∏', callback_data=f'rec_2_0_{j}'))
    kb.row(InlineKeyboardButton(text='–ü–æ–∫–∏–Ω—É–ª–∏ –∫–ª—É–± –ø–æ—Å–ª–µ 4 –∏ –±–æ–ª–µ–µ –º–µ—Å—è—Ü–µ–≤ –ø–æ–¥–ø–∏—Å–∫–∏', callback_data=f'rec_3_0_{j}'))
    kb.row(InlineKeyboardButton(text='–ì–ª—è–Ω—É—Ç—å –≤—Å–µ—Ö', callback_data=f'rec_4_0_{j}'))
    kb.row(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='admin'))
    return kb.as_markup()


def get_etap_out(i: str, j: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()

    kb.row(InlineKeyboardButton(text='–ù—É–ª–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', callback_data=f'gro_{i}_0_{j}'))
    kb.row(InlineKeyboardButton(text='–ü–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', callback_data=f'gro_{i}_1_{j}'))
    kb.row(InlineKeyboardButton(text='–í—Ç–æ—Ä–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', callback_data=f'gro_{i}_2_{j}'))
    kb.row(InlineKeyboardButton(text='–¢—Ä–µ—Ç—å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', callback_data=f'gro_{i}_3_{j}'))
    kb.row(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='reach_out'))
    return kb.as_markup()


def set_reach_pout(user_id: int, username : str, table: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text='First reachout', callback_data=f'dda_0_{user_id}_{table}'),
  InlineKeyboardButton(text='2nd reachout', callback_data=f'dda_1_{user_id}_{table}'))
    kb.row(InlineKeyboardButton(text='3rd reachout', callback_data=f'dda_2_{user_id}_{table}'),
    InlineKeyboardButton(text='–í–µ—Ä–Ω–µ—Ç—Å—è –ø–æ–∑–∂–µ', callback_data=f'dda_3_{user_id}_{table}'))
    kb.row(InlineKeyboardButton(text='–ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', callback_data=f'dda_6_{user_id}_{table}'))
    kb.row(InlineKeyboardButton(text='–í–µ—Ä–Ω—É–ª—Å—è', callback_data=f'dda_4_{user_id}_{table}'),
InlineKeyboardButton(text='–û—Ç–∫–∞–∑–∞–ª—Å—è', callback_data=f'dda_5_{user_id}_{table}'))
    kb.row(InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å', url=f't.me/{username}'))
    kb.row(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='reach_out'))
    return kb.as_markup()



####–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–∏–∂–∫–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–µ–º–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–µ–π–¥–∂ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö –µ—Å —á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ

def boss_mark(t: str, j: str, numpage: str, users: list ) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    if users is not None:
        

        numpage = int(numpage)
        pages = len(users) // 10 + 1  # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        print(pages)
        numpage = max(0, min(numpage, pages - 1))  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –¥–æ –≥—Ä–∞–Ω–∏—Ü —Å—Ç—Ä–∞–Ω–∏—Ü
        start = numpage * 10  # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        end = start + 10
        for i in range(start, end):
            try:
                if users[i].username is not None:
                    kb.row(InlineKeyboardButton(text=f'{users[i].username}', callback_data=f'ri_{users[i].user_id}_{t}_{j}'))
            except:
                break
        if numpage > 0:
            kb.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f'rec_{t}_{j}_{numpage - 1}'))
        if numpage < pages - 1:
            kb.row(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥", callback_data=f'rec_{t}_{j}_{numpage + 1}'))
    kb.row(InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data=f'reach_out'))
    return kb.as_markup()